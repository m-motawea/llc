package llc

import (
	"bytes"
	"encoding/binary"
	"reflect"
	"testing"
)

func TestLLCPDU(t *testing.T) {
	// testing with an example STP LLC Header and payload
	STPLLC := []byte{
		0x42, 0x41, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x19, 0x06, 0xEA, 0xB8, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x10, 0x00, 0x80, 0x01, 0x00, 0x19, 0x06, 0xEA, 0xb8, 0x80, 0x80, 0x05, 0x00, 0x00, 0x14, 0x00, 0x02,
		0x00, 0x20, 0x00, 0x0F, 0x00,
	}

	c := make([]byte, 2)
	binary.BigEndian.PutUint16(c[0:2], 0x03)
	test1 := LLCPDU{
		DSAP:    LSAPBridgeSpanningTreeProtocol,
		SSAP:    LSAP(0x41),
		Control: []byte{0, 3},
		Packet: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x19, 0x06, 0xEA, 0xB8, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x10, 0x00, 0x80, 0x01, 0x00, 0x19, 0x06, 0xEA, 0xb8, 0x80, 0x80, 0x05, 0x00, 0x00, 0x14, 0x00, 0x02,
			0x00, 0x20, 0x00, 0x0F, 0x00,
		},
	}
	res1, err := test1.MarshalBinary()
	if err != nil {
		t.Errorf("failed to marshal frame due to error %v", err)
	}

	if !bytes.Equal(res1, STPLLC) {
		t.Errorf("result is not correct\n marshal result:\n%v\nactual:\n%v\n", res1, STPLLC)
	}

	test2 := LLCPDU{}
	err = test2.UnmarshalBinary(STPLLC)
	if err != nil {
		t.Errorf("failed to unmarshal from binary due to error %v", err)
	}
	if !reflect.DeepEqual(test1, test2) {
		t.Errorf("two LLCPDU are not equal. test1:\n%v\ntest2:\n%v\n", test1, test2)
	}

}
